1.Demo1
Перенести jar на git
в первом таске как можно джарку не добавлять руками
таски gradle

maven vs gradle ?
rebase конфликт
история коммитов rebase

Task2.
spring conn pool
.gitignore

1. Spring и  MySQL выкинуть
2. финдеры - отд пакет.
3. Логгер 
4. Exception handler в Controller
5. Для Exception - body
6. на константы не трать время бланки там, типо такого
this.searchCondition = sortCondition + BLANK + OR + BLANK
7. StringBuilder
8.sql помести в папочку resources
9.сертификат сервис - line 134   логики по созданию фандера здесь быть не должно. автовайр, вызваем метод файндера и передаем параметры. 
10. из контроллера.
 return list != null &&  !list.isEmpty()   вроде бы проверка на налл есть в методе isEmpty проверь плз. если есть то удали своё.  и про Optional помним. лучше его пользовать
@DeleteMapping(value = "/{id}")
    public ResponseEntity<Tag> delete(@PathVariable(value = "id") int id) {
        try {
            tagService.delete(id);
11. добавить проверку - существует ли объект который мы собираемся удалять
12.
константы повыносить в енамы
половину удалить)
14. запросы и константы в енамы пойдут
файндер делаешь бином и автовайришь его сюда. передаешь параметр.
15.
подготовь плз постман коллекцию по эндпоинтам.
16.и тесты! 

Model Module



Entity class - in this case there is no need to create a base class, since it contains only one field (id) and this class should not be abstract
BaseException - we don't use it in the model module, so it shouldn't be there (this way we just add more dependencies between modules)
Please check if we need to add default constructors to all entities.


Persistence Module



Please review your packages, as I don't think that we should structure logic based on the entity name (certificate/tag)
Check if we need AbstractEntityDAO, as it seems that it only holds constants, and all other logic is present in the interface
Please review all required constants and move them to a separate classes (enum)
Finders logic can be moved to a separate utils directory, also it is not clear why EntityFinder is abstract
According to the requirements we shouldn't support update operation for Tag
Please review the option to add Mappers classes to map ResultSet to the entity object and you can move ResultSetExtractor<...> tagExtractor logic to this classes.
Need to review connection pool logic (static initialization, DbResourceManager with ResourceBundle)


Service Module



AbstractEntityService is not needed as it duplicates interface
CertificateService - the purpose of this logic is not clear : private static CertificateService INSTANCE = new CertificateService();
Remove AbstractEntityValidator
There is no point in using base class if we need to add the following verifications:
                             if (dao instanceof CertificateDAO) {



Common



Please use more meaningful exception names, messages.
Please review your @Autowired logic, as it a bit messy (field / setter / constructor ) and use the best approach
use Optional when it's possible
Please make sure that your logic supports this requirement:
CRUD operations for GiftCertificate. If new tags are passed during creation/modification – they should be created in the DB.

Прочесть:
1. RAML
2. Теория ко второму демо. это как пример. чтобы был готов что ожидать - но вопросы могут задать любые. 
Спринг 
 что такое DI и IoС, разница. способы имплементации.
Спринг контекст, способы конфигурации.
Жизненный цикл бинов.
Разница между аннотациями Service, Component, Controller, Repository
Cкоупы бинов.

Rest
HTTP methods
Richardson's maturity model
версионинг

Дизайн
принципы SOLID, DRY, KISS и т.д.
Виды тестирования.

базы
что такое индексы, как работают.
типы ключей, зачем нужны
транзакция. ACID

джава
фичи новых версий.
что такое лямбда, функц.интерфейс, дефолт методы
Stream API